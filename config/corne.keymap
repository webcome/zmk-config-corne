#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

// dt-formatter: indent = "  "
// dt-formatter: multilineIntegerCellsIndent = "reindent"
// dt-formatter: multilineListCommaStyle = "leading"

&sk { /delete-property/ ignore-modifiers; };

/ {
  combos {
    compatible = "zmk,combos";

    tab {
      key-positions = <14 15>;
      bindings = <&kp TAB>;
    };

    caps_word {
      key-positions = <17 18>;
      bindings = <&caps_word>;
    };

    delete {
      key-positions = <32 33>;
      bindings = <&kp DELETE>;
    };

    backspace {
      bindings = <&kp BACKSPACE>;
      key-positions = <20 21>;
    };

    leader_leader_s {
      bindings = <&leader_leader_s>;
      key-positions = <16 19>;
    };

    cmd_shift {
      bindings = <&kp LS(LCMD)>;
      key-positions = <13 36>;
    };
  };

  macros {
    greeting: greeting {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      label = "greeting";
      bindings = <&kp H &kp E &kp L &kp L &kp O>;
    };

    shift: with_lshift {
      compatible = "zmk,behavior-macro-one-param";
      #binding-cells = <1>;
      label = "KEY_PRESS_WITH_LEFT_SHIFT_MODIFIER";
      bindings
        = <&macro_press>
        , <&kp LSHFT>
        , <&macro_tap>
        , <&macro_param_1to1 &kp MACRO_PLACEHOLDER>
        , <&macro_release>
        , <&kp LSHFT>
        ;
    };

    as: autoshift {
      compatible = "zmk,behavior-macro-one-param";
      #binding-cells = <1>;
      label = "AUTOSHIFT_KEYPRESS";
      bindings
        = <&macro_press>
        , <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>
        , <&macro_pause_for_release>
        , <&macro_release>
        , <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>
        ;
    };

    leader_leader_s: leader_leader {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp ESCAPE &kp SPACE &kp SPACE &kp S>;
      label = "LEADER_LEADER";
    };
  };

  behaviors {
    as_ht: autoshift_hold_tap {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "AUTOSHIFT_HOLD_TAP";
      bindings = <&shift>, <&kp>;

      tapping-term-ms = <190>;
    };

    hml: homewrow_mods_left {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "HOMEROW_MODS_LEFT_HAND";
      bindings = <&kp>, <&kp>;

      tapping-term-ms = <200>;
      hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
      flavor = "tap-preferred";
    };

    hmr: homewrow_mods_right {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "HOMEROW_MODS_RIGHT_HAND";
      bindings = <&kp>, <&kp>;

      tapping-term-ms = <200>;
      hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
      flavor = "tap-preferred";
    };

    capdance: capdance {
      compatible = "zmk,behavior-tap-dance";
      label = "CAPDANCE";
      #binding-cells = <0>;
      bindings = <&sl 4>, <&kp CAPS>;
    };

    volknob: volume_encoder {
      compatible = "zmk,behavior-sensor-rotate";
      label = "ENCODER_VOLUME_KNOB";
      #sensor-binding-cells = <0>;
      bindings = <&kp C_VOL_UP>, <&kp C_VOL_DN>;
    };

    rgbknob: rgb_encoder {
      compatible = "zmk,behavior-sensor-rotate-var";
      label = "ENCODER_RGB";
      #sensor-binding-cells = <2>;
      bindings = <&rgb_ug>, <&rgb_ug>;
    };

    hmr2: hmr2 {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "HMR2";
      bindings = <&sl>, <&kp>;

      tapping-term-ms = <200>;
      hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
      flavor = "tap-preferred";
    };

    hml2holdpref: hml2holdpref {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "HML2HOLDPREF";
      bindings = <&sl>, <&kp>;

      tapping-term-ms = <200>;
      hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
      flavor = "hold-preferred";
    };
  };

  conditional_layers {
    compatible = "zmk,conditional-layers";

    tri_layer {
      if-layers = <2 1>;
      then-layer = <6>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    base {
      bindings = <
        &trans  &kp Q              &kp W                &kp E            &kp R                &kp T     &kp Y   &kp U                   &kp I             &kp O                 &kp P                       &trans
        &trans  &hml LEFT_SHIFT A  &hml LEFT_CONTROL S  &hml LEFT_ALT D  &hml LEFT_COMMAND F  &kp G     &kp H   &hml RIGHT_COMMAND J    &hmr RIGHT_ALT K  &hmr RIGHT_CONTROL L  &hmr RIGHT_SHIFT SEMICOLON  &trans
        &trans  &kp Z              &hmr2 4 X            &kp C            &kp V                &kp B     &kp N   &kp M                   &kp COMMA         &hmr2 6 DOT           &kp FSLH                    &trans
                                                        &sl 7            &sl 1                &trans    &trans  &hml2holdpref 2 RETURN  &kp SPACE
      >;
    };

    raise {
      bindings = <
        &trans  &kp ESCAPE  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp STAR  &kp LPAR   &kp RPAR  &trans
        &trans  &trans      &trans  &trans    &trans    &trans       &kp MINUS  &kp EQUAL  &kp LBKT  &kp RBKT   &kp BSLH  &trans
        &trans  &kp EXCL    &trans  &trans    &trans    &trans       &trans     &trans     &trans    &kp GRAVE  &kp APOS  &trans
                                    &trans    &trans    &trans       &trans     &trans     &trans
      >;
    };

    lower {
      bindings = <
        &trans  &kp ESCAPE  &trans  &trans  &trans  &trans    &kp HOME        &kp PG_DN       &kp PG_UP     &kp END          &trans    &trans
        &trans  &trans      &trans  &trans  &trans  &trans    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &trans    &trans
        &trans  &trans      &trans  &trans  &trans  &trans    &trans          &trans          &trans        &kp GRAVE        &kp APOS  &trans
                                    &trans  &trans  &trans    &trans          &trans          &trans
      >;
    };

    autoshift {
      bindings = <
        &trans  &as Q  &as W  &as E   &as R   &as T     &as Y   &as U   &as I   &as O   &as P   &trans
        &trans  &as A  &as S  &as D   &as F   &as G     &as H   &as J   &as K   &as L   &trans  &trans
        &trans  &as Z  &as X  &as C   &as V   &as B     &as N   &as M   &trans  &trans  &trans  &trans
                              &trans  &trans  &trans    &trans  &trans  &trans
      >;
    };

    num {
      bindings = <
        &trans  &trans  &trans  &trans  &trans  &trans    &kp SLASH     &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp MINUS   &trans
        &trans  &trans  &trans  &trans  &trans  &trans    &kp ASTERISK  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp PLUS    &kp EQUAL
        &trans  &trans  &trans  &trans  &trans  &trans    &kp COMMA     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD  &trans
                                &trans  &trans  &trans    &trans        &trans        &kp NUMBER_0
      >;
    };

    both {
      bindings = <
        &trans      &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
        &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans  &trans
        &trans      &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                                &trans        &trans        &trans          &trans  &trans  &trans
      >;
    };

    fn {
      bindings = <
        &trans  &trans  &kp F7  &kp F8  &kp F9  &kp F10    &kp C_AC_DESKTOP_SHOW_ALL_APPLICATIONS  &kp C_VOLUME_DOWN     &kp C_VOLUME_UP       &trans  &trans  &kp C_POWER
        &trans  &trans  &kp F4  &kp F5  &kp F6  &kp F11    &trans                                  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &trans  &trans  &trans
        &trans  &trans  &kp F1  &kp F2  &kp F3  &kp F12    &trans                                  &trans                &trans                &trans  &trans  &trans
                                &trans  &trans  &trans     &trans                                  &trans                &trans
      >;
    };

    special {
      bindings = <
        &trans  &kp ESCAPE  &kp LG(W)    &kp LG(E)  &kp LG(R)  &kp LG(T)    &trans         &trans        &trans         &kp LG(O)    &kp LG(P)     &trans
        &trans  &kp LG(A)   &kt LG(TAB)  &trans     &kp LG(F)  &kp LG(G)    &kp LG(MINUS)  &kp LG(PLUS)  &kp LG(K)      &kp LG(L)    &trans        &trans
        &trans  &kp LG(Z)   &kp LG(X)    &kp LG(C)  &kp LG(V)  &kp LG(B)    &trans         &trans        &kp LG(GRAVE)  &kp LG(DOT)  &kp LG(APOS)  &trans
                                         &trans     &trans     &trans       &trans         &trans        &trans
      >;
    };
  };
};
